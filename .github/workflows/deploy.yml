name: Deploy Frontend

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -f ./Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/screen-frontend:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/screen-frontend:latest

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

      - name: Start ssh-agent
        id: ssh-agent-setup
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add private_key

      - name: Print Environment Variables
        run: |
          echo "SSH_USERNAME: ${{ secrets.SSH_USERNAME }}"
          echo "SSH_HOST: ${{ secrets.SSH_HOST }}"

      - name: Test SSH Connection
        env:
          SSH_AUTH_SOCK: ${{ steps.ssh-agent-setup.outputs.ssh-auth-sock }}
        run: |
          ssh -o StrictHostKeyChecking=no -T "${{ secrets.SSH_USERNAME }}"@mikeds.dev:24607 "echo SSH connection successful"

      - name: Deploy to Server
        env:
          SSH_AUTH_SOCK: ${{ steps.ssh-agent-setup.outputs.ssh-auth-sock }}
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USERNAME }}"@"${{ secrets.SSH_HOST }}" << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
            docker-compose -f /path/to/your/docker-compose.yml up -d frontend
          EOF

      - name: Clean up
        run: |
          rm -f private_key